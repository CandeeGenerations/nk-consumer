name: Build and Deployment

on:
  push:
    branches: [main]

  workflow_dispatch:

env:
  ENV: PROD
  APP: 'NK Consumer'

jobs:
  start-notify:
    name: Notify of Build Start
    runs-on: ubuntu-latest
    env:
      NOTIFY_INCOMING_WEBHOOK: ${{ secrets.NOTIFY_INCOMING_WEBHOOK }}

    steps:
      - uses: tferreira/matterfy@releases/v1
        if: always()
        with:
          type: 'cancel'
          job_name: '*[${{ env.APP }}]* Starting Build and Deployment to *${{ env.ENV }}*...'
          url: ${{ env.NOTIFY_INCOMING_WEBHOOK }}

  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ secrets.APP_NAME }}
      NOTIFY_INCOMING_WEBHOOK: ${{ secrets.NOTIFY_INCOMING_WEBHOOK }}

      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Check out code
        id: checkout
        uses: actions/checkout@v4

      - name: Read node from package.json
        uses: culshaw/read-package-node-version-actions@v1
        id: read-package-json

      - name: Configure AWS credentials
        id: log-into-aws
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: log-into-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          REGISTRY: ${{ steps.log-into-ecr.outputs.registry }}
          REPOSITORY: ${{ env.APP_NAME }}
          IMAGE_TAG: ${{ steps.read-package-json.outputs.version }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:latest -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:latest
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Notify of failed build
        uses: tferreira/matterfy@releases/v1
        if: ${{ failure() }}
        with:
          type: ${{ job.status }}
          job_name: '*[${{ env.APP }}]* Failed to Build for *${{ env.ENV }}*'
          url: ${{ env.NOTIFY_INCOMING_WEBHOOK }}

  deploy:
    needs: [build]
    name: Deploy
    runs-on: ubuntu-latest
    env:
      KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      NOTIFY_INCOMING_WEBHOOK: ${{ secrets.NOTIFY_INCOMING_WEBHOOK }}

    steps:
      - name: Deploying the app
        id: deploy
        uses: ghostzero/kubectl@v1
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG }}
        with:
          args: rollout restart deployment/consumer-deployment -n ${{ env.KUBE_NAMESPACE }}

      - name: Notify of failed deploy
        uses: tferreira/matterfy@releases/v1
        if: ${{ failure() }}
        with:
          type: ${{ job.status }}
          job_name: '*[${{ env.APP }}]* Failed to Deploy to *${{ env.ENV }}*'
          url: ${{ env.NOTIFY_INCOMING_WEBHOOK }}

  end-notify:
    needs: [deploy]
    name: Notify of Deploy Complete
    runs-on: ubuntu-latest
    env:
      NOTIFY_INCOMING_WEBHOOK: ${{ secrets.NOTIFY_INCOMING_WEBHOOK }}

    steps:
      - uses: tferreira/matterfy@releases/v1
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*[${{ env.APP }}]* Successfully Completed Build and Deployment to *${{ env.ENV }}*'
          url: ${{ env.NOTIFY_INCOMING_WEBHOOK }}
